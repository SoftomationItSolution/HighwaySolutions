CREATE PROCEDURE `USP_SystemSettingInsertUpdate`(
IN p_DefaultPlazaId smallint,
IN p_AllotmentDays smallint,
IN p_IsAccessControl boolean,
IN p_LoginAccess boolean,
IN p_ExemptAccess boolean,
IN p_FleetAccess boolean,
IN p_SubClassRequired boolean,
IN p_FasTagPenalty boolean,
IN p_FasTagPenaltyMultiply smallint,
IN p_CashReturn boolean,
IN p_CashReturnDiscount smallint,
IN p_OpeningBalance decimal(18,2),
IN p_DataStatus smallint,
IN p_CreatedDate datetime,
IN p_CreatedBy bigint,
IN p_ModifiedDate datetime,
IN p_ModifiedBy bigint
)
BEGIN
 DECLARE AlertMessage VARCHAR(4000);
 DECLARE rowCount INT;
 SET AlertMessage = ';';
  SELECT COUNT(*) INTO rowCount FROM tbl_SystemSetting;
   IF rowCount = 0 THEN
			INSERT INTO tbl_SystemSetting(DefaultPlazaId,IsAccessControl,AllotmentDays,LoginAccess,
            ExemptAccess,FleetAccess,SubClassRequired,
            FasTagPenalty,FasTagPenaltyMultiply,CashReturn,CashReturnDiscount,
            OpeningBalance,ClosingBalance,DataStatus,CreatedDate,CreatedBy)
			VALUES(p_DefaultPlazaId,p_IsAccessControl,p_AllotmentDays,p_LoginAccess,
            p_ExemptAccess,p_FleetAccess,p_SubClassRequired,
            p_FasTagPenalty,p_FasTagPenaltyMultiply,p_CashReturn,p_CashReturnDiscount,
            p_OpeningBalance,0,p_DataStatus,p_CreatedDate,p_CreatedBy);
            SET AlertMessage = 'System setting added successfully;';
            
                      
     ELSE        
            UPDATE tbl_SystemSetting SET DefaultPlazaId=p_DefaultPlazaId,IsAccessControl=p_IsAccessControl,
            AllotmentDays=p_AllotmentDays,LoginAccess=p_LoginAccess,ExemptAccess=p_ExemptAccess,FleetAccess=p_FleetAccess,
            FasTagPenalty=p_FasTagPenalty,FasTagPenaltyMultiply=p_FasTagPenaltyMultiply,
            CashReturn=p_CashReturn,CashReturnDiscount=p_CashReturnDiscount,
            OpeningBalance=p_OpeningBalance,DataStatus=p_DataStatus,ModifiedDate=p_ModifiedDate,ModifiedBy=p_ModifiedBy,SubClassRequired=p_SubClassRequired
          LIMIT 1;
          SET AlertMessage = 'System setting updated successfully;';
    END IF;    
            
  SELECT AlertMessage;
END

CREATE PROCEDURE `USP_SystemVehicleClassInsertUpdate`(
	IN p_SystemVehicleClassId smallint,
  	IN p_AvcVehicleClassId smallint,
	IN p_SystemVehicleClassName varchar(100),
	IN p_SystemVehicleClassDescription varchar(100),
    IN p_SystemSubClassIds varchar(4000),
	IN p_PermissibleWeight decimal(18,3),
    IN p_DataStatus smallint,
    IN p_CreatedDate DateTime,
    IN p_CreatedBy bigint,
    IN p_ModifiedDate DateTime,
    IN p_ModifiedBy bigint
)
BEGIN
    DECLARE AlertMessage VARCHAR(4000);
    SET AlertMessage = ';';

    IF NOT EXISTS (SELECT SystemVehicleClassId FROM tbl_SystemVehicleClass WHERE SystemVehicleClassId = p_SystemVehicleClassId) THEN
       insert into tbl_SystemVehicleClass(SystemVehicleClassId,AvcVehicleClassId,SystemVehicleClassName,SystemVehicleClassDescription,SystemSubClassIds,PermissibleWeight,DataStatus,CreatedDate,CreatedBy,ModifiedDate,ModifiedBy)
        VALUES (p_SystemVehicleClassId,p_AvcVehicleClassId, p_SystemVehicleClassName, p_SystemVehicleClassDescription, p_SystemSubClassIds,p_PermissibleWeight,p_DataStatus, p_CreatedDate, p_CreatedBy,p_ModifiedDate,p_ModifiedBy);
        SET AlertMessage = 'System vehicle class added successfully;';
    ELSE
        UPDATE tbl_SystemVehicleClass
        SET
            DataStatus = p_DataStatus,
            ModifiedDate = p_ModifiedDate,
            ModifiedBy = p_ModifiedBy,
            SystemVehicleClassName = p_SystemVehicleClassName,
            SystemVehicleClassDescription = p_SystemVehicleClassDescription,
            SystemSubClassIds=p_SystemSubClassIds,
            PermissibleWeight = p_PermissibleWeight,
           
            AvcVehicleClassId=p_AvcVehicleClassId
        WHERE SystemVehicleClassId = p_SystemVehicleClassId;
        
        SET AlertMessage = 'System vehicle class updated successfully;';
    END IF;

    SELECT AlertMessage;

END

CREATE DEFINER=`root`@`localhost` PROCEDURE `USP_SystemVehicleSubClassInsertUpdate`(
	IN p_SystemVehicleClassId smallint,
	IN p_SystemVehicleSubClassId  smallint,
    IN p_DataStatus smallint,
    IN p_CreatedDate DateTime,
    IN p_CreatedBy bigint,
    IN p_ModifiedDate DateTime,
    IN p_ModifiedBy bigint
)
BEGIN
    DECLARE AlertMessage VARCHAR(4000);
    SET AlertMessage = ';';

    IF NOT EXISTS (SELECT SystemVehicleClassId FROM tbl_SystemVehicleSubClass WHERE SystemVehicleSubClassId  = p_SystemVehicleSubClassId ) THEN
       insert into tbl_SystemVehicleSubClass(SystemVehicleClassId,SystemVehicleSubClassId ,DataStatus,CreatedDate,CreatedBy,ModifiedDate,ModifiedBy)
        VALUES (p_SystemVehicleClassId, p_SystemVehicleSubClassId ,p_DataStatus, p_CreatedDate, p_CreatedBy,p_ModifiedDate,p_ModifiedBy);
        SET AlertMessage = 'System vehicle sub class added successfully;';
    ELSE
        UPDATE tbl_SystemVehicleSubClass
        SET
            DataStatus = p_DataStatus,
            ModifiedDate = p_ModifiedDate,
            ModifiedBy = p_ModifiedBy,
            SystemVehicleClassId = p_SystemVehicleClassId
        WHERE SystemVehicleSubClassId  = p_SystemVehicleSubClassId ;
        
        SET AlertMessage = 'System vehicle sub class updated successfully;';
    END IF;

    SELECT AlertMessage;

END

CREATE  PROCEDURE `USP_SystemVehicleSubClassGet`()
BEGIN
		SELECT S.SystemVehicleClassId,S.SystemVehicleClassName,S.SystemVehicleClassDescription,
        S.AvcVehicleClassId,S.PermissibleWeight,SC.SystemVehicleSubClassId,F.FasTagVehicleClassName AS SystemVehicleSubClassName,
        SC.DataStatus,SC.CreatedDate,SC.CreatedBy,SC.ModifiedDate,SC.ModifiedBy
	FROM  tbl_SystemVehicleSubClass SC 
	INNER JOIN tbl_SystemVehicleClass S ON SC.SystemVehicleClassId=S.SystemVehicleClassId
	INNER JOIN tbl_FastagVehicleClass F ON SC.SystemVehicleSubClassId =F.FasTagVehicleClassId
	WHERE SC.DataStatus=1;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `USP_TollFareGetByEffectedFrom`(
IN EffectedFrom DATE
)
BEGIN
	
    DECLARE AEffectiveDate DATE;
    DECLARE inTollFareId BIGINT;
    DECLARE IsSubClassRequired BIT;
    DECLARE AccessControl BIT;
    DECLARE IsDefaultPlazaId SMALLINT;
	
	SELECT SubClassRequired, DefaultPlazaId, IsAccessControl 
	FROM tbl_SystemSetting
	LIMIT 1
	INTO IsSubClassRequired, IsDefaultPlazaId, AccessControl;
    
	DROP TEMPORARY TABLE IF exists tempTollFareClass;
    
    CREATE TEMPORARY TABLE tempTollFareClass (
        SystemVehicleClassId SMALLINT,
        SystemVehicleClassName VARCHAR(255),
        SubVehicleClassId SMALLINT DEFAULT 0,
        SubVehicleClassName VARCHAR(255) DEFAULT '',
        TollFareId BIGINT DEFAULT 0,
        TollFare DECIMAL(18,2) DEFAULT 0,
        ReturnFare DECIMAL(18,2) DEFAULT 0,
        FasTagPenalty DECIMAL(18,2) DEFAULT 0,
        OverweightPenalty DECIMAL(18,2) DEFAULT 0,
        JourneyId BIGINT DEFAULT 0,
        JourneyName VARCHAR(255) DEFAULT 'Not Required'
    );
	SET SQL_SAFE_UPDATES = 0;
    SET IsSubClassRequired = IFNULL(IsSubClassRequired, 0);
	
    
    SELECT MAX(EffectedFrom)
    INTO AEffectiveDate
    FROM tbl_TollFareMaster
    WHERE EffectedFrom <= EffectedFrom AND DataStatus = 1;

    IF (AEffectiveDate IS NULL) THEN
        SELECT MIN(EffectedFrom)
        INTO AEffectiveDate
        FROM tbl_TollFareMaster
        WHERE EffectedFrom > EffectedFrom AND DataStatus = 1;
    END IF;

    IF (IsSubClassRequired = 1) THEN
        INSERT INTO tempTollFareClass (SystemVehicleClassId, SystemVehicleClassName, SubVehicleClassId, SubVehicleClassName)
        SELECT S.SystemVehicleClassId, S.SystemVehicleClassName, SC.SystemVehicleSubClassId, F.FasTagVehicleClassName
		FROM tbl_SystemVehicleSubClass SC
		INNER JOIN tbl_FastagVehicleClass F ON SC.SystemVehicleSubClassId = F.FasTagVehicleClassId
		INNER JOIN tbl_SystemVehicleClass S ON SC.SystemVehicleClassId = S.SystemVehicleClassId
		INNER JOIN tbl_DataStatusMaster DS ON SC.DataStatus = DS.DataStatusId
		WHERE SC.DataStatus = 1 AND F.DataStatus = 1;
    ELSE
        INSERT INTO tempTollFareClass (SystemVehicleClassId, SystemVehicleClassName, SubVehicleClassId, SubVehicleClassName)
        SELECT S.SystemVehicleClassId, S.SystemVehicleClassName, 0, 'Not Required'
        FROM tbl_SystemVehicleClass S
        INNER JOIN tbl_DataStatusMaster DS ON S.DataStatus = DS.DataStatusId
        WHERE S.DataStatus = 1;
    END IF;

    SELECT TollFareId INTO inTollFareId  FROM tbl_TollFareMaster 
    WHERE EffectedFrom = AEffectiveDate order by EffectedFrom DESC 
    LIMIT 1;

    SET inTollFareId  = IFNULL(inTollFareId , 0);
	
    UPDATE tempTollFareClass T
    INNER JOIN (
        SELECT FC.TollFareId, FC.JourneyId, FC.SystemVehicleClassId, FC.SubVehicleClassId, FC.TollFare, FC.ReturnFare, FC.FasTagPenalty, FC.OverweightPenalty, JM.JourneyName
        FROM tbl_TollFareConfiguration FC
        LEFT JOIN tbl_JourneyMaster JM ON FC.JourneyId = JM.JourneyId
        WHERE FC.TollFareId = inTollFareId 
    ) V ON T.SystemVehicleClassId = V.SystemVehicleClassId AND T.SubVehicleClassId = V.SubVehicleClassId
    SET T.TollFareId = V.TollFareId, T.JourneyId = V.JourneyId, T.TollFare = V.TollFare, T.ReturnFare = V.ReturnFare, T.FasTagPenalty = V.FasTagPenalty,
        T.OverweightPenalty = V.OverweightPenalty;

    IF (AccessControl = 0) THEN
        UPDATE tempTollFareClass SET JourneyName = (SELECT PlazaName FROM tbl_PlazaConfiguration WHERE PlazaId = IsDefaultPlazaId);
    END IF;
	
    SELECT * FROM tempTollFareClass;
END